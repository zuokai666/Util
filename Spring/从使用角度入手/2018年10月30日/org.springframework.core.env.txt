public interface PropertyResolver{
	
	void addProperty(String key,String value);
	boolean containsProperty(String key);
	void removeProperty(String key);
	String getProperty(String key);
	String getPropertyOrDefault(String key,String defaultValue);
	String resolvePlaceholders(String text);
	String resolveRequiredPlaceholder(String text) throws IllegalArgumentException;
}

public interface Environment extends PropertyResolver{
	
	String[] getActiveProfiles();
	String[] getDefaultProfiles();
	boolean acceptsProfiles(Profiles profiles);
}

public interface ConfigurablePropertyResolver extends PropertyResolver{
	
	getConversionService();
	void setConversionService(ConfigurableConversionService service);
	
	setPlaceholderPrefix();
	setPlaceholderSuffix();
	setValueSeparator();
	void setRequiredProperties();
	void validateRequiredProperties();
}

public interface ConfigurableEnvironment extends
	Environment,ConfigurablePropertyResolver{
	
	void setActiveProfiles(String[] profiles);
	void addActiveProfile(String profile);
	void setDefaultProfiles(String[] profiles);
	MutablePropertySources getPropertySources();
	Map<String,Object> getSystemProperties();
	Map<String,Object> getSystemEnvironment();
	void merge(ConfigurableEnvironment parent);
}

public interface Profiles{
	
	boolean matches(Predicate<String> activeProfiles);
}

public interface PropertySources{
	Stream steam();
	boolean contains(String name);
	PropertySource<?> get(String name);
}



































